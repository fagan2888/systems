/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MLEngine_H
#define MLEngine_H

#include <thrift/TDispatchProcessor.h>
#include "ml_types.h"



class MLEngineIf {
 public:
  virtual ~MLEngineIf() {}
  virtual double Predict(const int32_t id, const std::string& x) = 0;
  virtual void Learn(const std::string& x, const double y) = 0;
  virtual void LearnFromID(const int32_t id) = 0;
};

class MLEngineIfFactory {
 public:
  typedef MLEngineIf Handler;

  virtual ~MLEngineIfFactory() {}

  virtual MLEngineIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MLEngineIf* /* handler */) = 0;
};

class MLEngineIfSingletonFactory : virtual public MLEngineIfFactory {
 public:
  MLEngineIfSingletonFactory(const boost::shared_ptr<MLEngineIf>& iface) : iface_(iface) {}
  virtual ~MLEngineIfSingletonFactory() {}

  virtual MLEngineIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MLEngineIf* /* handler */) {}

 protected:
  boost::shared_ptr<MLEngineIf> iface_;
};

class MLEngineNull : virtual public MLEngineIf {
 public:
  virtual ~MLEngineNull() {}
  double Predict(const int32_t /* id */, const std::string& /* x */) {
    double _return = (double)0;
    return _return;
  }
  void Learn(const std::string& /* x */, const double /* y */) {
    return;
  }
  void LearnFromID(const int32_t /* id */) {
    return;
  }
};

typedef struct _MLEngine_Predict_args__isset {
  _MLEngine_Predict_args__isset() : id(false), x(false) {}
  bool id;
  bool x;
} _MLEngine_Predict_args__isset;

class MLEngine_Predict_args {
 public:

  MLEngine_Predict_args() : id(0), x() {
  }

  virtual ~MLEngine_Predict_args() throw() {}

  int32_t id;
  std::string x;

  _MLEngine_Predict_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_x(const std::string& val) {
    x = val;
  }

  bool operator == (const MLEngine_Predict_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(x == rhs.x))
      return false;
    return true;
  }
  bool operator != (const MLEngine_Predict_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_Predict_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_Predict_pargs {
 public:


  virtual ~MLEngine_Predict_pargs() throw() {}

  const int32_t* id;
  const std::string* x;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLEngine_Predict_result__isset {
  _MLEngine_Predict_result__isset() : success(false) {}
  bool success;
} _MLEngine_Predict_result__isset;

class MLEngine_Predict_result {
 public:

  MLEngine_Predict_result() : success(0) {
  }

  virtual ~MLEngine_Predict_result() throw() {}

  double success;

  _MLEngine_Predict_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const MLEngine_Predict_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MLEngine_Predict_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_Predict_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MLEngine_Predict_presult__isset {
  _MLEngine_Predict_presult__isset() : success(false) {}
  bool success;
} _MLEngine_Predict_presult__isset;

class MLEngine_Predict_presult {
 public:


  virtual ~MLEngine_Predict_presult() throw() {}

  double* success;

  _MLEngine_Predict_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MLEngine_Learn_args__isset {
  _MLEngine_Learn_args__isset() : x(false), y(false) {}
  bool x;
  bool y;
} _MLEngine_Learn_args__isset;

class MLEngine_Learn_args {
 public:

  MLEngine_Learn_args() : x(), y(0) {
  }

  virtual ~MLEngine_Learn_args() throw() {}

  std::string x;
  double y;

  _MLEngine_Learn_args__isset __isset;

  void __set_x(const std::string& val) {
    x = val;
  }

  void __set_y(const double val) {
    y = val;
  }

  bool operator == (const MLEngine_Learn_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const MLEngine_Learn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_Learn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_Learn_pargs {
 public:


  virtual ~MLEngine_Learn_pargs() throw() {}

  const std::string* x;
  const double* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_Learn_result {
 public:

  MLEngine_Learn_result() {
  }

  virtual ~MLEngine_Learn_result() throw() {}


  bool operator == (const MLEngine_Learn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLEngine_Learn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_Learn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_Learn_presult {
 public:


  virtual ~MLEngine_Learn_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MLEngine_LearnFromID_args__isset {
  _MLEngine_LearnFromID_args__isset() : id(false) {}
  bool id;
} _MLEngine_LearnFromID_args__isset;

class MLEngine_LearnFromID_args {
 public:

  MLEngine_LearnFromID_args() : id(0) {
  }

  virtual ~MLEngine_LearnFromID_args() throw() {}

  int32_t id;

  _MLEngine_LearnFromID_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const MLEngine_LearnFromID_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const MLEngine_LearnFromID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_LearnFromID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_LearnFromID_pargs {
 public:


  virtual ~MLEngine_LearnFromID_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_LearnFromID_result {
 public:

  MLEngine_LearnFromID_result() {
  }

  virtual ~MLEngine_LearnFromID_result() throw() {}


  bool operator == (const MLEngine_LearnFromID_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MLEngine_LearnFromID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MLEngine_LearnFromID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MLEngine_LearnFromID_presult {
 public:


  virtual ~MLEngine_LearnFromID_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MLEngineClient : virtual public MLEngineIf {
 public:
  MLEngineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MLEngineClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double Predict(const int32_t id, const std::string& x);
  void send_Predict(const int32_t id, const std::string& x);
  double recv_Predict();
  void Learn(const std::string& x, const double y);
  void send_Learn(const std::string& x, const double y);
  void recv_Learn();
  void LearnFromID(const int32_t id);
  void send_LearnFromID(const int32_t id);
  void recv_LearnFromID();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MLEngineProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MLEngineIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MLEngineProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Predict(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Learn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LearnFromID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MLEngineProcessor(boost::shared_ptr<MLEngineIf> iface) :
    iface_(iface) {
    processMap_["Predict"] = &MLEngineProcessor::process_Predict;
    processMap_["Learn"] = &MLEngineProcessor::process_Learn;
    processMap_["LearnFromID"] = &MLEngineProcessor::process_LearnFromID;
  }

  virtual ~MLEngineProcessor() {}
};

class MLEngineProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MLEngineProcessorFactory(const ::boost::shared_ptr< MLEngineIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MLEngineIfFactory > handlerFactory_;
};

class MLEngineMultiface : virtual public MLEngineIf {
 public:
  MLEngineMultiface(std::vector<boost::shared_ptr<MLEngineIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MLEngineMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MLEngineIf> > ifaces_;
  MLEngineMultiface() {}
  void add(boost::shared_ptr<MLEngineIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double Predict(const int32_t id, const std::string& x) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Predict(id, x);
    }
    return ifaces_[i]->Predict(id, x);
  }

  void Learn(const std::string& x, const double y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Learn(x, y);
    }
    ifaces_[i]->Learn(x, y);
  }

  void LearnFromID(const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LearnFromID(id);
    }
    ifaces_[i]->LearnFromID(id);
  }

};



#endif
