#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PrepareResponse:
  """
  Attributes:
   - promised
   - highest_accepted_value
   - value_is_chosen
   - highest_prepared
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'promised', None, None, ), # 1
    (2, TType.STRING, 'highest_accepted_value', None, None, ), # 2
    (3, TType.BOOL, 'value_is_chosen', None, None, ), # 3
    (4, TType.I32, 'highest_prepared', None, None, ), # 4
  )

  def __init__(self, promised=None, highest_accepted_value=None, value_is_chosen=None, highest_prepared=None,):
    self.promised = promised
    self.highest_accepted_value = highest_accepted_value
    self.value_is_chosen = value_is_chosen
    self.highest_prepared = highest_prepared

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.promised = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.highest_accepted_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.value_is_chosen = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.highest_prepared = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrepareResponse')
    if self.promised is not None:
      oprot.writeFieldBegin('promised', TType.BOOL, 1)
      oprot.writeBool(self.promised)
      oprot.writeFieldEnd()
    if self.highest_accepted_value is not None:
      oprot.writeFieldBegin('highest_accepted_value', TType.STRING, 2)
      oprot.writeString(self.highest_accepted_value)
      oprot.writeFieldEnd()
    if self.value_is_chosen is not None:
      oprot.writeFieldBegin('value_is_chosen', TType.BOOL, 3)
      oprot.writeBool(self.value_is_chosen)
      oprot.writeFieldEnd()
    if self.highest_prepared is not None:
      oprot.writeFieldBegin('highest_prepared', TType.I32, 4)
      oprot.writeI32(self.highest_prepared)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
