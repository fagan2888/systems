#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from paxos import Paxos
from paxos.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool Ping()'
  print '  i32 Propose(i32 instance, i32 proposal_number, string value)'
  print '  PrepareResponse Prepare(i32 instance, i32 proposal_number)'
  print '  PrepareFutureResponse PrepareFuture(i32 instance, i32 proposal_number)'
  print '  void Learn(i32 instance, string command)'
  print '  void RunCommand(i32 cmd_id, i32 node_id, string command)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Paxos.Client(protocol)
transport.open()

if cmd == 'Ping':
  if len(args) != 0:
    print 'Ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.Ping())

elif cmd == 'Propose':
  if len(args) != 3:
    print 'Propose requires 3 args'
    sys.exit(1)
  pp.pprint(client.Propose(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'Prepare':
  if len(args) != 2:
    print 'Prepare requires 2 args'
    sys.exit(1)
  pp.pprint(client.Prepare(eval(args[0]),eval(args[1]),))

elif cmd == 'PrepareFuture':
  if len(args) != 2:
    print 'PrepareFuture requires 2 args'
    sys.exit(1)
  pp.pprint(client.PrepareFuture(eval(args[0]),eval(args[1]),))

elif cmd == 'Learn':
  if len(args) != 2:
    print 'Learn requires 2 args'
    sys.exit(1)
  pp.pprint(client.Learn(eval(args[0]),args[1],))

elif cmd == 'RunCommand':
  if len(args) != 3:
    print 'RunCommand requires 3 args'
    sys.exit(1)
  pp.pprint(client.RunCommand(eval(args[0]),eval(args[1]),args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
